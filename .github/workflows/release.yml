name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.8.1'

      - name: List files in the root directory
        run: ls -al

      - name: Check if package-lock.json exists
        run: test -f package-lock.json && echo "package-lock.json exists" || echo "package-lock.json does not exist"

      - name: Clear NPM Cache
        run: npm cache clean --force

      - name: Install dependencies
        run: npm ci

      - name: Generate Release Notes
        id: release_notes
        uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config: |
            name-template: "Version $NEXT_PATCH_VERSION"
            tag-template: "v$NEXT_PATCH_VERSION"
            categories:
              - title: "🚀 Features"
                labels: [ "feature", "enhancement", "feat" ]
              - title: "🐛 Bug Fixes"
                labels: [ "fix", "bug", "bugfix" ]
            change-template: "- $TITLE ([#{{number}}]({{url}}))"
            change-title-escapes: true
            template: |
              ## Changes
              $CHANGES
            prerelease: false
            draft: true

      - name: Debug Release Notes Output
        env:
          RELEASE_NOTES: ${{ steps.release_notes.outputs.body }}
        run: |
          echo "Release Notes Output: $RELEASE_NOTES"

      - name: Publish Release Notes
        if: steps.release_notes.outputs.body != ''
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const releaseNotes = `${{ steps.release_notes.outputs.body }}`;
            const newVersion = require('./package.json').version;
            const releaseTitle = `Version ${newVersion}`;

            const date = new Date();
            const formattedDate = date.toLocaleDateString("en-US", {
              year: "numeric",
              month: "long",
              day: "numeric"
            });
            const finalBody = `## Release Notes for Version ${newVersion} - ${formattedDate}\n\n${releaseNotes}`;

            try {
              // Fetch all existing releases
              const releases = await github.rest.repos.listReleases({
                owner: owner,
                repo: repo
              });

              // Find the existing draft release by tag name
              const existingRelease = releases.data.find(r => r.tag_name === `v${newVersion}`);

              if (existingRelease) {
                console.log(`Updating existing draft release: v${newVersion}`);

                // Update the existing draft release
                await github.rest.repos.updateRelease({
                  owner: owner,
                  repo: repo,
                  release_id: existingRelease.id,
                  tag_name: `v${newVersion}`,
                  name: releaseTitle,
                  body: finalBody,
                  draft: false,
                  prerelease: false
                });

              } else {
                console.log(`Creating new release: v${newVersion}`);

                // If no draft exists, create a new release
                await github.rest.repos.createRelease({
                  owner: owner,
                  repo: repo,
                  tag_name: `v${newVersion}`,
                  name: releaseTitle,
                  body: finalBody,
                  draft: false,
                  prerelease: false
                });
              }

            } catch (error) {
              console.error(`Error handling release: ${error.message}`);
              throw error;
            }

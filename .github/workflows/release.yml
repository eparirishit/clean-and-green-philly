name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.8.1'

      - name: Install dependencies
        run: npm ci

      - name: Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Read version number
        id: get_version
        run: |
          # Assuming Semantic Release outputs a version file or prints version info,
          # you need to capture that. One approach is to have Semantic Release write the version to a file.
          if [ -f version.txt ]; then
            version=$(cat version.txt)
            echo "version=${version}" >> $GITHUB_OUTPUT
          else
            echo "version not found!"
            exit 1
          fi

      - name: Create Release with Automated Notes
        uses: actions/github-script@v6
        env:
          NEW_VERSION: ${{ steps.get_version.outputs.version }}
        with:
          script: |
            const newVersion = process.env.NEW_VERSION.trim();
            const tagName = `v${newVersion}`;

            // Create release with GitHub's autogenerated release notes
            const response = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `Version ${newVersion}`,
              generate_release_notes: true,
              draft: false,
              prerelease: false
            });

            // Optionally, add a custom header with the date
            const date = new Date().toLocaleDateString("en-US", {
              year: "numeric",
              month: "long",
              day: "numeric"
            });
            const customHeader = `Release Notes for Version ${newVersion} - ${date}\n\n`;
            const updatedBody = customHeader + response.data.body;

            // Update the release body with the custom header
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: response.data.id,
              body: updatedBody,
              name: `Version ${newVersion}`
            });

      # - name: Semantic Release
      #   uses: cycjimmy/semantic-release-action@v4.1.1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

